@page
@model SM.APP.Pages.Funds.IndexModel
@{

}
<link rel="stylesheet" href="~/css/funds.css" asp-append-version="true" />

<div class="container my-4 my-md-5">
    <div class="d-flex flex-wrap justify-content-between align-items-center mb-3 gap-2">
        <h1 class="mb-0">Fund Requests</h1>
        <a href="/Funds/Create" class="btn btn-primary shadow-sm">
            <i class="bi bi-plus-circle me-1"></i> Create New Request
        </a>
    </div>

    <div class="card shadow-sm mb-4">
        <div class="card-body">
            <div class="row g-3 align-items-end">
                <div class="col-lg-4 col-md-6">
                    <label for="filterMemberCode" class="form-label">Member Code</label>
                    <div class="input-group">
                        <input type="text" class="form-control" id="filterMemberCode" placeholder="Enter member code...">
                        <button class="btn btn-outline-secondary d-md-none" type="button" id="scanMemberCodeBtn" title="Scan QR Code">
                            <i class="bi bi-qr-code-scan"></i>
                        </button>
                    </div>
                    <div id="qrScannerContainer" class="mt-3 d-none">
                        <div id="reader" style="width: 100%;"></div>
                        <button id="btnStopScan" class="btn btn-danger mt-2">Stop Scanning</button>
                    </div>
                </div>
                <div class="col-lg-3 col-md-6">
                    <label for="filterAssignedTo" class="form-label">Assigned To</label>
                    <select id="filterAssignedTo" class="selectpicker" data-live-search="true" title="Any Servant" data-width="100%">
                    </select>
                </div>
                <div class="col-lg-3 col-md-6">
                    <label for="filterStatus" class="form-label">Status</label>
                    <select id="filterStatus" class="selectpicker" title="Any Status" multiple data-width="100%">
                        <option value="Open" selected>Open</option>
                        <option value="Approved">Approved</option>
                        <option value="Rejected">Rejected</option>
                        <option value="Delivered">Delivered</option>
                    </select>
                </div>
                <div class="col-lg-2 col-md-6">
                    <div class="d-grid d-md-flex gap-2">
                        <button class="btn btn-primary flex-grow-1" type="button" id="applyFiltersBtn"><i class="bi bi-funnel-fill me-1"></i> Filter</button>
                        <button class="btn btn-outline-secondary" type="button" id="clearFiltersBtn" title="Clear Filters"><i class="bi bi-x-lg"></i></button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="mb-4">
        <ul class="nav nav-pills category-filter-nav nav-fill flex-wrap" id="category-pills-container">
        </ul>
    </div>
    <!-- ==== SUMMARY BOX ==== -->
    <div class="row g-3 mb-4" id="summary-container">
        <div class="col-12">
            <div class="card summary-card shadow-sm">
                <div class="card-body d-flex justify-content-around text-center p-3">
                    <div>
                        <h6 class="card-title text-muted mb-1">Total Fund Requests</h6>
                        <h2 class="card-text fw-bold" id="total-requests-count">0</h2>
                    </div>
                    <div class="border-start"></div>
                    <div>
                        <h6 class="card-title text-muted mb-1">Total Approved Amount</h6>
                        <h2 class="card-text fw-bold" id="total-approved-amount">0 EGP</h2>
                    </div>
                </div>
            </div>
        </div>
    </div>


    <div class="list-group shadow-sm" id="fund-list">
        <div class="list-group-item text-center p-5" id="loading-indicator">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2 mb-0">Loading Funds...</p>
        </div>
    </div>
</div>
<!-- Edit Fund Modal -->
<partial name="_FundEditPartial" />
<!-- Update Status Modal -->
<partial name="_FundUpdateStatusPartial" />
<!-- Delete Modal -->
<partial name="_DeleteFundModalPartial" />
@section Scripts {
    <script>
        (async function() {
            let allFunds = [];
            const apiBaseUrl = '@Services.SMConfigurationManager.ApiBase';

            //Scanning code
            const scanButton = document.getElementById("scanMemberCodeBtn");
            const qrScannerContainer = document.getElementById("qrScannerContainer");
            const stopScanButton = document.getElementById("btnStopScan");
            const searchInput = document.getElementById("filterMemberCode");
            if (scanButton) {
                let html5QrCode;
                scanButton.addEventListener("click", function () {
                    qrScannerContainer.classList.remove("d-none");
                    html5QrCode = new Html5Qrcode("reader");
                    html5QrCode.start(
                        { facingMode: "environment" },
                        { fps: 10, qrbox: { width: 250, height: 250 } },
                        (decodedText) => {
                            searchInput.value = decodedText;
                            document.getElementById('applyFiltersBtn').click();
                            html5QrCode.stop();
                            qrScannerContainer.classList.add("d-none");
                        },
                        (errorMessage) => { console.warn("QR Code scan error: ", errorMessage); }
                    ).catch((err) => { console.error("QR Code scanning failed: ", err); });
                });
                stopScanButton.addEventListener("click", function () {
                    if (html5QrCode) { html5QrCode.stop(); }
                    qrScannerContainer.classList.add("d-none");
                });
            }

            // --- ACTION FUNCTIONS ---
            function editFund(fund) {
                showEditModal(fund);
            }
            function updateFundStatus(fund) {
                showUpdateStatusModal(fund);
            }
            async function deleteFund(fund) {
               showDeleteFundModal(fund);
            }

            // --- HELPER & DATA LOADING FUNCTIONS ---
            function formatDate(dateString) { return !dateString ? '' : new Date(dateString).toLocaleDateString('en-GB'); }

            async function loadServants() {
                try {
                    const dropdown = $("#filterAssignedTo");
                    const response = await fetch(`${apiBaseUrl}/Servants/GetServants`, { method: "GET", credentials: "include" });
                    if (!response.ok) throw new Error("Failed to fetch servants.");
                    const servants = await response.json();
                    dropdown.empty();
                    servants.forEach(s => dropdown.append($('<option>', { value: s.servantID, text: s.servantName })));
                    dropdown.selectpicker('refresh');
                } catch (err) { console.error("Error loading servants:", err); }
            }

            async function loadFunds() {
                try {
                    const response = await fetch(`${apiBaseUrl}/api/Fund/GetAllFunds`, { method: "GET", credentials: "include" });
                    if (!response.ok) throw new Error("Failed to fetch funds.");
                    allFunds = await response.json();
                    applyFilters();
                } catch (err) {
                    console.error("Error loading funds:", err);
                    $("#fund-list").html('<div class="list-group-item text-center text-danger p-5">Failed to load fund requests.</div>');
                }
            }

            // --- RENDERING FUNCTIONS ---
            function renderCategoryPills(funds, activeCategory) {
                const categories = {};
                funds.forEach(fund => {
                    const category = fund.fundCategory;
                    if (!categories[category]) { categories[category] = { count: 0 }; }
                    categories[category].count++;
                });
                const pillsContainer = $('#category-pills-container');
                pillsContainer.empty();
                const finalActiveCategory = (activeCategory && categories[activeCategory]) ? activeCategory : 'all';
                pillsContainer.append(`<li class="nav-item"><a class="nav-link ${finalActiveCategory === 'all' ? 'active' : ''}" href="#" data-category="all">All (${funds.length})</a></li>`);
                for (const categoryName in categories) {
                    pillsContainer.append(`<li class="nav-item"><a class="nav-link ${finalActiveCategory === categoryName ? 'active' : ''}" href="#" data-category="${categoryName}">${categoryName} (${categories[categoryName].count})</a></li>`);
                }
            }

            function renderSummary(funds) {
                const totalRequests = funds.length;
                const totalAmount = funds.reduce((sum, fund) => sum + (fund.approvedAmount || 0), 0);
                $('#total-requests-count').text(totalRequests);
                $('#total-approved-amount').text(`${totalAmount.toLocaleString('en-US')} EGP`);
            }

            function renderFunds(funds) {
                const fundListContainer = $('#fund-list');
                fundListContainer.empty();
                if (funds.length === 0) {
                    fundListContainer.html('<div class="list-group-item text-center p-5">No fund requests match your criteria.</div>');
                    return;
                }
                funds.forEach(fund => {
                    let deleteButtonHtml = '';
                    if (fund.statusName === 'Open') {
                        deleteButtonHtml = `<li><hr class="dropdown-divider"></li><li><button class="dropdown-item text-danger delete-btn" type="button"><i class="bi bi-trash me-2"></i>Delete</button></li>`;
                    }
                    const fundItemHtml = `
                        <div class="list-group-item" data-fund-id="${fund.fundID}">
                            <div class="d-flex w-100 justify-content-between align-items-start">
                                <div class="me-3">
                                    <h5 class="mb-0">${fund.member.code}</h5>
                                    <small class="text-muted d-block mb-1">${fund.member.fullName}</small>
                                    <p class="mb-1 text-muted">${fund.requestDescription}</p>
                                    <small class="text-muted"><i class="bi bi-calendar-event"></i> ${formatDate(fund.requestDate)}</small>
                                </div>
                                <div class="d-flex align-items-center text-nowrap">
                                    <span class="badge bg-primary me-2">${fund.fundCategory}</span>
                                    <span class="badge bg-warning text-dark me-3">${fund.statusName}</span>
                                    <div class="dropdown">
                                        <button class="btn btn-sm btn-outline-secondary py-0 px-2" type="button" data-bs-toggle="dropdown"><i class="bi bi-three-dots-vertical"></i></button>
                                        <ul class="dropdown-menu dropdown-menu-end">
                                            <li><a class="dropdown-item" href="/Funds/Detail/${fund.fundID}"><i class="bi bi-eye me-2"></i>View</a></li>
                                            <li><button class="dropdown-item edit-btn" type="button"><i class="bi bi-pencil me-2"></i>Edit</button></li>
                                            <li><button class="dropdown-item update-status-btn" type="button"><i class="bi bi-check2-square me-2"></i>Update Status</button></li>
                                            ${deleteButtonHtml}
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;
                    fundListContainer.append(fundItemHtml);
                });
            }

            // --- FILTERING LOGIC ---
            function applyFilters() {
                const codeFilter = $('#filterMemberCode').val().toLowerCase();
                const assignedToFilter = $('#filterAssignedTo').val();
                const statusFilter = $('#filterStatus').val();
                let activeCategory = $('#category-pills-container .nav-link.active').data('category');
                let mainFilteredFunds = allFunds.filter(fund => {
                    const codeMatch = !codeFilter || fund.member.code.toLowerCase().includes(codeFilter);
                    const assignedToMatch = !assignedToFilter || fund.approverID == assignedToFilter;
                    const statusMatch = statusFilter.length === 0 || statusFilter.includes(fund.statusName);
                    return codeMatch && assignedToMatch && statusMatch;
                });
                renderCategoryPills(mainFilteredFunds, activeCategory);
                const finalActiveCategory = $('#category-pills-container .nav-link.active').data('category');
                let finalFilteredFunds = mainFilteredFunds;
                if (finalActiveCategory && finalActiveCategory !== 'all') {
                     finalFilteredFunds = mainFilteredFunds.filter(fund => fund.fundCategory === finalActiveCategory);
                }
                renderFunds(finalFilteredFunds);
                renderSummary(finalFilteredFunds);
            }

            // --- EVENT HANDLERS ---
            $('#applyFiltersBtn').on('click', applyFilters);
            $('#clearFiltersBtn').on('click', function() {
                $('#filterMemberCode').val('');
                $('#filterAssignedTo').selectpicker('val', '');
                $('#filterStatus').selectpicker('val', '');
                $('#category-pills-container .nav-link').removeClass('active');
                $('#category-pills-container .nav-link[data-category="all"]').addClass('active');
                applyFilters();
            });
            $('#category-pills-container').on('click', '.nav-link', function (e) {
                e.preventDefault();
                $('#category-pills-container .nav-link').removeClass('active');
                $(this).addClass('active');
                applyFilters();
            });
            $('#fund-list').on('click', '.edit-btn, .update-status-btn, .delete-btn', function() {
                const fundId = $(this).closest('.list-group-item').data('fund-id');
                const fund = allFunds.find(f => f.fundID == fundId);
                if (!fund) return;
                if ($(this).hasClass('edit-btn')) editFund(fund);
                else if ($(this).hasClass('update-status-btn')) updateFundStatus(fund);
                else if ($(this).hasClass('delete-btn')) deleteFund(fund);
            });

            $(document).on('fundDataChanged', function() {
                console.log('Fund data changed, reloading list...');
                loadFunds();
            });

            // --- INITIAL PAGE LOAD ---
            $('.selectpicker').selectpicker();
            await loadServants();
            await loadFunds();
        })();
    </script>
}
