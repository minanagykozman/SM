@page
@model SM.APP.Pages.Funds.CreateModel

@{
    ViewData["Title"] = "Create Fund Request";
}
<partial name="_LoadingPartial" />
<div class="container mt-4" id="container">
    <h1 class="text-center">Create Fund Request</h1>
    <hr />
    <div class="card shadow-lg p-4">
        <partial name="_SuccessToastPartial" />

        <form id="frmCreate" style="position:relative" class="needs-validation" novalidate>
            <div class="row g-3">
                <div class="col-md-12">
                    <label for="MemberCode" class="form-label">Member Code</label>
                    <div class="d-flex align-items-center gap-2">
                        <select id="MemberCode" name="MemberCode"
                                class="selectpicker flex-grow-1"
                                data-live-search="true"
                                title="Select Member"
                                data-width="100%"
                                required>
                        </select>
                        <button class="btn btn-outline-secondary d-md-none" type="button" id="btnScanQR" title="Scan QR Code">
                            <i class="bi bi-qr-code-scan"></i>
                        </button>
                    </div>
                    <div id="memberCode-error" class="text-danger mt-1"></div>
                </div>

                <div class="col-md-6">
                    <div class="form-floating">
                        <input id="MemberName" name="MemberName" class="form-control" disabled />
                        <label>Name</label>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-floating">
                        <input id="FamilyMembers" class="form-control" placeholder="Enter School" disabled />
                        <label>Family Members</label>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-floating">
                        <input hidden id="OldMobile" class="form-control" />
                        <input id="Mobile" class="form-control" placeholder="Enter Mobile" />
                        <label>Mobile</label>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-floating">
                        <select class="form-select" id="Category" name="Category" required>
                        </select>
                        <label>Request Category</label>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-floating">
                        <input id="Amount" class="form-control" type="number" placeholder="Enter Requested Amount" />
                        <label>Amount(optional)</label>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-floating">
                        <select class="form-select" id="AssignTo" name="AssignTo" title="Select Servant" required>
                        </select>
                        <label>Assign To</label>
                    </div>
                </div>
                <div class="col-md-12">
                    <div class="form-floating">
                        <textarea id="Description" name="Description" class="form-control" placeholder="Enter Description" style="height: 100px;" required></textarea>
                        <label>Description</label>
                    </div>
                </div>
            </div>
            <div class="d-flex justify-content-between mt-4">
                <a href="Index" id="backToList" class="btn btn-outline-secondary">Back to List</a>
                <div class="d-flex gap-2">
                    <button type="submit" class="btn btn-primary">Create</button>
                </div>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        var apiBaseUrl = '@Services.SMConfigurationManager.ApiBase';

        async function loadMemberCodes() {
            try {
                const codesDropDown = $("#MemberCode");
                const request = `${apiBaseUrl}/Member/GetAllCodes`;
                const response = await fetch(request, {
                    method: "GET",
                    credentials: "include",
                    headers: { "Content-Type": "application/json" }
                });

                if (!response.ok) throw new Error("Failed to fetch member codes.");
                const codesList = await response.json();

                codesDropDown.empty();
                codesList.forEach(m => {
                    codesDropDown.append($('<option>', {
                        value: m.memberID,
                        text: m.code
                    }));
                });

                codesDropDown.selectpicker('refresh');
            } catch (err) {
                console.error("Error loading member codes:", err);
            }
        }
        async function loadServants() {
            try {
                const servantsDropDown = $("#AssignTo");
                const request = `${apiBaseUrl}/Servants/GetServants?isActive=true`;
                const response = await fetch(request, {
                    method: "GET",
                    credentials: "include",
                    headers: { "Content-Type": "application/json" }
                });

                if (!response.ok) throw new Error("Failed to fetch member codes.");
                const servantsList = await response.json();

                servantsDropDown.empty();
                servantsDropDown.append($('<option>', {
                    value: "",
                    text: "Select Servant"
                }));
                servantsList.forEach(m => {
                    servantsDropDown.append($('<option>', {
                        value: m.servantID,
                        text: m.servantName
                    }));
                });
            } catch (err) {
                console.error("Error loading servants:", err);
            }
        }
        async function loadCategories() {
            try {
                const servantsDropDown = $("#Category");
                const request = `${apiBaseUrl}/api/Fund/GetFundCategories`;
                const response = await fetch(request, {
                    method: "GET",
                    credentials: "include",
                    headers: { "Content-Type": "application/json" }
                });

                if (!response.ok) throw new Error("Failed to fetch categories.");
                const servantsList = await response.json();

                servantsDropDown.empty();
                servantsDropDown.append($('<option>', {
                    value: "",
                    text: "Select Category"
                }));
                servantsList.forEach(m => {
                    servantsDropDown.append($('<option>', {
                        value: m,
                        text: m
                    }));
                });
            } catch (err) {
                console.error("Error loading categories:", err);
            }
        }

        async function getMemberDetails(memberId) {
            if (!memberId) {
                $("#MemberName").val('');
                $("#Mobile").val('');
                $("#FamilyMembers").val('');
                return;
            }
            try {
                const request = `${apiBaseUrl}/Member/GetMember?memberID=${memberId}`;
                const response = await fetch(request, {
                    method: "GET",
                    credentials: "include",
                    headers: { "Content-Type": "application/json" }
                });
                if (!response.ok) throw new Error("Failed to fetch member details.");
                const memberData = await response.json();
                $("#MemberName").val(memberData.fullName);
                $("#Mobile").val(memberData.mobile);
                $("#Category").focus();
            } catch (err) {
                console.error("Error loading member details:", err);
                $("#MemberName").val('Error loading data');
                $("#Mobile").val('');
                $("#FamilyMembers").val('');
            }
        }

        $(async function () {

            showLoading();
            $('#MemberCode').selectpicker();

            await loadMemberCodes();
            await loadServants();
            await loadCategories();
            hideLoading();

            $("#MemberCode").on('change', function () {
                // *** THE FIX FOR CLEARING THE ERROR ***
                // This line manually tells the validator to re-check the field.
                // If a value has been selected, the error will be cleared.
                $(this).valid();

                const selectedMemberId = $(this).val();
                getMemberDetails(selectedMemberId);
            });

            // --- JQUERY VALIDATION CONFIGURATION FOR THIS FORM ---
            $("#frmCreate").validate({
                ignore: ':hidden:not(.selectpicker)', // Important for bootstrap-select
                errorElement: 'div',
                errorClass: 'text-danger', // Use Bootstrap's text color for errors

                // Define rules as needed
                rules: {
                    MemberCode: { required: true },
                    Category: { required: true },
                    AssignTo: { required: true },
                    Description: { required: true }
                },

                // --- THE FIX FOR ERROR PLACEMENT ---
                // This tells the validator where to put the error message.
                errorPlacement: function (error, element) {
                    if (element.attr("name") == "MemberCode") {
                        error.appendTo("#memberCode-error");
                    } else {
                        error.insertAfter(element);
                    }
                },

                // These functions handle adding/removing the red border for bootstrap-select
                highlight: function (element, errorClass, validClass) {
                    $(element).addClass('is-invalid');
                    if ($(element).hasClass('selectpicker')) {
                        $(element).next('.bootstrap-select').find('.dropdown-toggle').addClass('is-invalid');
                    }
                },
                unhighlight: function (element, errorClass, validClass) {
                    $(element).removeClass('is-invalid');
                    if ($(element).hasClass('selectpicker')) {
                        $(element).next('.bootstrap-select').find('.dropdown-toggle').removeClass('is-invalid');
                    }
                },

                submitHandler: function (form) {
                    // Your logic to submit the form data
                    alert("Form is valid and ready to be submitted!");
                    // e.g., await createFundRequest();
                }
            });
        });
    </script>
}