@page
@model SM.APP.Pages.Funds.CreateModel

@{
    ViewData["Title"] = "Create Fund Request";
}
<partial name="_LoadingPartial" />
<div class="container mt-4" id="container">
    <h1 class="text-center">Create Fund Request</h1>
    <hr />
    <div class="card shadow-lg p-4">
        <partial name="_SuccessToastPartial" />

        <form id="frmCreate" style="position:relative" class="needs-validation">
            <div class="row g-3">
                <div class="col-md-12">
                    <label for="MemberCode" class="form-label">Member Code</label>
                    <div class="d-flex align-items-center gap-2">
                        <select id="MemberCode" name="MemberCode"
                                class="selectpicker flex-grow-1"
                                data-live-search="true"
                                title="Select Member"
                                data-width="100%"
                                required
                                >
                        </select>
                        <button class="btn btn-outline-secondary d-md-none" type="button" id="scanMemberCodeBtn" title="Scan QR Code">
                            <i class="bi bi-qr-code-scan"></i>
                        </button>
                    </div>
                    <div id="memberCode-error" class="text-danger mt-1"></div>
                    <div id="qrScannerContainer" class="mt-3 d-none">
                        <div id="reader" style="width: 100%;"></div>
                        <button id="btnStopScan" class="btn btn-danger mt-2">Stop Scanning</button>
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="form-floating">
                        <input id="MemberName" name="MemberName" class="form-control" disabled />
                        <label>Name</label>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-floating">
                        <input id="FamilyMembers" class="form-control" placeholder="Enter School" disabled />
                        <label>Family Members</label>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-floating">
                        <input hidden id="OldMobile" class="form-control" />
                        <input id="Mobile" class="form-control" placeholder="Enter Mobile" />
                        <label>Mobile</label>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-floating">
                        <select class="form-select" id="Category" name="Category" required>
                        </select>
                        <label>Request Category</label>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-floating">
                        <input id="Amount" class="form-control" type="number" placeholder="Enter Requested Amount" />
                        <label>Amount(optional)</label>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-floating">
                        <select class="form-select" id="AssignTo" name="AssignTo" title="Select Servant" required>
                        </select>
                        <label>Assign To</label>
                    </div>
                </div>
                <div class="col-md-12">
                    <div class="form-floating">
                        <textarea id="Description" name="Description" class="form-control" placeholder="Enter Description" style="height: 100px;" required></textarea>
                        <label>Description</label>
                    </div>
                </div>
            </div>
            <div class="d-flex justify-content-between mt-4">
                <a href="Index" id="backToList" class="btn btn-outline-secondary">Back to List</a>
                <div class="d-flex gap-2">
                    <button type="submit" class="btn btn-primary">Create</button>
                </div>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        var apiBaseUrl = '@Services.SMConfigurationManager.ApiBase';

        async function loadMemberCodes() {
            try {
                const codesDropDown = $("#MemberCode");
                const request = `${apiBaseUrl}/Member/GetAllCodes`;
                const response = await fetch(request, {
                    method: "GET",
                    credentials: "include",
                    headers: { "Content-Type": "application/json" }
                });

                if (!response.ok) throw new Error("Failed to fetch member codes.");
                const codesList = await response.json();

                codesDropDown.empty();
                codesList.forEach(m => {
                    codesDropDown.append($('<option>', {
                        value: m.memberID,
                        text: m.code
                    }));
                });

                codesDropDown.selectpicker('refresh');
            } catch (err) {
                console.error("Error loading member codes:", err);
            }
        }
        async function loadServants() {
            try {
                const servantsDropDown = $("#AssignTo");
                const request = `${apiBaseUrl}/Servants/GetServants?isActive=true`;
                const response = await fetch(request, {
                    method: "GET",
                    credentials: "include",
                    headers: { "Content-Type": "application/json" }
                });

                if (!response.ok) throw new Error("Failed to fetch member codes.");
                const servantsList = await response.json();

                servantsDropDown.empty();
                servantsDropDown.append($('<option>', {
                    value: "",
                    text: "Select Servant"
                }));
                servantsList.forEach(m => {
                    servantsDropDown.append($('<option>', {
                        value: m.servantID,
                        text: m.servantName
                    }));
                });
            } catch (err) {
                console.error("Error loading servants:", err);
            }
        }
        async function loadCategories() {
            try {
                const servantsDropDown = $("#Category");
                const request = `${apiBaseUrl}/api/Fund/GetFundCategories`;
                const response = await fetch(request, {
                    method: "GET",
                    credentials: "include",
                    headers: { "Content-Type": "application/json" }
                });

                if (!response.ok) throw new Error("Failed to fetch categories.");
                const servantsList = await response.json();

                servantsDropDown.empty();
                servantsDropDown.append($('<option>', {
                    value: "",
                    text: "Select Category"
                }));
                servantsList.forEach(m => {
                    servantsDropDown.append($('<option>', {
                        value: m,
                        text: m
                    }));
                });
            } catch (err) {
                console.error("Error loading categories:", err);
            }
        }

        async function getMemberDetails(memberId) {
            if (!memberId) {
                $("#MemberName").val('');
                $("#Mobile").val('');
                $("#FamilyMembers").val('');
                return;
            }
            try {
                const request = `${apiBaseUrl}/Member/GetMember?memberID=${memberId}&includeFamilyCount=true`;
                const response = await fetch(request, {
                    method: "GET",
                    credentials: "include",
                    headers: { "Content-Type": "application/json" }
                });
                if (!response.ok) throw new Error("Failed to fetch member details.");
                const memberData = await response.json();
                $("#MemberName").val(memberData.fullName);
                $("#Mobile").val(memberData.mobile);
                $("#OldMobile").val(memberData.mobile);
                $("#FamilyMembers").val(memberData.familyCount);
                $("#Category").focus();
            } catch (err) {
                console.error("Error loading member details:", err);
                $("#MemberName").val('Error loading data');
                $("#Mobile").val('');
                $("#FamilyMembers").val('');
            }
        }
        async function createFundRequest(form){
            const amountValue = document.getElementById("Amount").value;
            const fundPayload = {
                memberID: $('#MemberCode').val(),
                requestDescription: document.getElementById("Description").value,
                approverID: $('#AssignTo').val(),
                approverNotes: null,
                requestedAmount: amountValue ? parseFloat(amountValue) : null,
                fundCategory: $('#Category').val()
            };
            try {
                const request = `${apiBaseUrl}/api/Fund/CreateFund`;
                const response = await fetch(request, {
                    method: "POST",
                    credentials: "include",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(fundPayload)
                });

                if (!response.ok)
                    throw new Error("Fund creation failed");

                if($('#Mobile').val()!=$('#OldMobile').val()){
                    const mobilePayload = {
                        memberID: $('#MemberCode').val(),
                        mobile: $('#Mobile').val()
                    };
                    const requestMobile = `${apiBaseUrl}/Member/UpdateMemberMobile`;
                    const responseMobile = await fetch(requestMobile, {
                        method: "PUT",
                        credentials: "include",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify(mobilePayload)
                    });

                    if (!responseMobile.ok)
                        throw new Error("Failed to update member mobile");
                }
                // Reset the form and clear selectpickers
                form.reset();
                $('#MemberCode').selectpicker('val', '');
                $('#AssignTo').val('');
                $('#Category').val('');
                $('#MemberName').val('');

            } catch (err) {
                console.error("Error creating fund:", err);
                throw err;
            }
        }
        function initializeScanning(){
             //Scanning code
            const scanButton = document.getElementById("scanMemberCodeBtn");
            const qrScannerContainer = document.getElementById("qrScannerContainer");
            const stopScanButton = document.getElementById("btnStopScan");
            if (scanButton) {
                let html5QrCode;
                scanButton.addEventListener("click", function () {
                    qrScannerContainer.classList.remove("d-none");

                    html5QrCode = new Html5Qrcode("reader");
                    html5QrCode.start(
                        { facingMode: "environment" }, // Use back camera
                        {
                            fps: 10,
                            qrbox: { width: 250, height: 250 }
                        },
                        (decodedText) => {
                            const scannedCode = decodedText.trim();
                            const targetOption = $('#MemberCode option').filter(function () {
                                return $(this).text().trim() === scannedCode;
                            });

                            // Check if a matching option was found.
                            if (targetOption.length > 0) {
                                const memberId = targetOption.val();
                                $("#MemberCode").selectpicker('val', memberId);
                                $("#MemberCode").trigger('change');
                            } else {
                                alert(`Error: Member code "${scannedCode}" was not found in the list.`);
                                console.error("Scanned member code not found:", scannedCode);
                            }
                            html5QrCode.stop();
                            qrScannerContainer.classList.add("d-none");
                        },
                        (errorMessage) => {
                            console.warn("QR Code scan error: ", errorMessage);
                        }
                    ).catch((err) => {
                        console.error("QR Code scanning failed: ", err);
                    });
                });
                // Stop scanning
                stopScanButton.addEventListener("click", function () {
                    if (html5QrCode) {
                        html5QrCode.stop();
                    }
                    qrScannerContainer.classList.add("d-none");
                });
            }
        }
        $(async function () {
           

            showLoading();
            $('#MemberCode').selectpicker();
            initializeScanning();
            await loadMemberCodes();
            await loadServants();
            await loadCategories();
            hideLoading();

            $("#MemberCode").on('change', function () {
                $(this).valid();
                const selectedMemberId = $(this).val();
                getMemberDetails(selectedMemberId);
            });


            $("#frmCreate").on('submit', async function(event) {
            event.preventDefault();

            if ($(this).valid()) {
                showLoading();
                try {
                    await createFundRequest(this); // 'this' is the form element
                } catch (error) {
                    console.error("Submission failed:", error);
                    showFailedToast("Error creating fund");
                } finally {
                    hideLoading();
                    showSuccessToast("Fund created successfully");
                }
            } else {
                console.log("Submit blocked: Form is not valid.");
            }
        });
        });
    </script>
}