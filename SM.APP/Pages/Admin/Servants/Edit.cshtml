@page "{id:int}"
@model SM.APP.Pages.Admin.Servants.EditModel
@{
    ViewData["Title"] = "Edit Servant";
}
<div class="container mt-4" id="container">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h4 class="mb-0" id="lblTitle">Edit Servant</h4>
    </div>
    <partial name="_SuccessToastPartial" />
    <form id="frmEdit" class="needs-validation" style="position:relative">
        <div class="card shadow-lg p-4">
            <input type="hidden" id="ServantID" name="ServantID" />

            <div class="row g-3 mt-2">
                <div class="col-md-6">
                    <div class="form-floating">
                        <input class="form-control" id="ServantName" name="ServantName" placeholder="Enter Servant Name">
                        <label>Servant Name</label>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-floating">
                        <input type="email" class="form-control" id="Email" name="Email" placeholder="Enter E-mail Address" disabled>
                        <label>E-mail</label>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-floating">
                        <input class="form-control" id="Mobile" name="Mobile" placeholder="Enter Mobile">
                        <label>Mobile</label>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-floating">
                        <input class="form-control" id="Mobile2" name="Mobile2" placeholder="Enter Mobile">
                        <label>Mobile 2</label>
                    </div>
                </div>
                <div class="col-md-6">
                    <label class="form-label floating-label-custom">Classes</label>
                    <select class="form-select" id="drpClasses" name="drpClasses" multiple></select>
                </div>
                <div class="col-md-6">
                    <label class="form-label floating-label-custom">Roles</label>
                    <select class="form-select" id="drpRoles" name="drpRoles" multiple required></select>
                </div>
            </div>
            <div class="d-flex justify-content-between mt-4">
                <a asp-page="Index" class="btn btn-outline-secondary">Back to List</a>
                <div class="d-flex gap-2">
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                </div>
            </div>
        </div>
    </form>
</div>
@section Scripts {
    <script>
        const apiBaseUrl = '@Services.SMConfigurationManager.ApiBase';

        async function loadRoles() {
            try {
                const rolesDropdown = document.getElementById("drpRoles");
                const request = `${apiBaseUrl}/Servants/GetSystemRoles`;
                const rolesResponse = await fetch(request, {
                    method: "GET",
                    credentials: "include",
                    headers: { "Content-Type": "application/json" }
                });

                if (!rolesResponse.ok) throw new Error("Failed to fetch roles.");
                const rolesList = await rolesResponse.json();

                rolesDropdown.innerHTML = "";
                rolesList.forEach(role => {
                    const option = document.createElement("option");
                    option.value = role.id;
                    option.textContent = role.name;
                    rolesDropdown.appendChild(option);
                });

                $('#drpRoles').select2({
                    placeholder: "Select roles",
                    allowClear: true,
                    width: '100%'
                });

            } catch (err) {
                console.error("Error loading roles:", err);
            }
        }

        async function loadServantData(servantId) {
            try {
                const request = `${apiBaseUrl}/Servants/GetServant?servantID=${servantId}`;
                const response = await fetch(request, {
                    method: "GET",
                    credentials: "include",
                    headers: { "Content-Type": "application/json" }
                });

                if (!response.ok) {
                    throw new Error("Failed to fetch servant data.");
                }

                const servant = await response.json();

                $("#ServantID").val(servant.servantID);
                $("#ServantName").val(servant.servantName);
                $("#Email").val(servant.email);
                $("#Mobile").val(servant.mobile1);
                $("#Mobile2").val(servant.mobile2);

                if (servant.servantClassesIDs) {
                    $('#drpClasses').val(servant.servantClassesIDs).trigger('change');
                }
                if (servant.servantRoles) {
                    $('#drpRoles').val(servant.servantRoles).trigger('change');
                }

            } catch (err) {
                console.error("Error loading servant data:", err);
                showFailedToast("Could not load servant data. " + err.message);
                $('#frmEdit :input').prop('disabled', true);
            }
        }

        async function updateServant() {
            const selectedClasses = Array.from(document.getElementById("drpClasses").selectedOptions).map(opt => parseInt(opt.value));
            const selectedRoles = Array.from(document.getElementById("drpRoles").selectedOptions).map(opt => opt.value);

            const payload = {
                servantID: parseInt($("#ServantID").val()),
                roles: selectedRoles,
                name: $("#ServantName").val(),
                mobile: $("#Mobile").val(),
                mobile2: $("#Mobile2").val(),
                classes: selectedClasses
            };

            try {
                const request = `${apiBaseUrl}/Servants/Update`;
                const response = await fetch(request, {
                    method: "POST",
                    credentials: "include",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(payload)
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    const errorMessage = errorData.message || "Servant update failed";
                    throw new Error(errorMessage);
                }

                showSuccessToast("Servant updated successfully");

            } catch (err) {
                console.error("Error updating servant:", err);
                showFailedToast(err.message);
            }
        }

        $(async function () {
            showLoading();

            const pathParts = window.location.pathname.split('/');
            const servantId = pathParts[pathParts.length - 1];

            await loadClasses(apiBaseUrl);
            await loadRoles();
            await loadServantData(servantId);

            hideLoading();

            // --- Form Submit Handler ---
            $("#frmEdit").on("submit", async function(event) {
                event.preventDefault();

                // Check if the form is valid using the generic validator
                if (!$(this).valid()) {
                    return;
                }

                showLoading();
                await updateServant();
                hideLoading();
            });
        });
    </script>
}