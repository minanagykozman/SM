@page
@model SM.APP.Pages.Admin.Members.CreateModel

@{
    ViewData["Title"] = "Create Member";
}

<partial name="_LoadingPartial" />
<div class="container mt-4" id="container">
    <h1 class="text-center">Create Member</h1>
    <hr />
    <div class="card shadow-lg p-4">
        <partial name="_SuccessToastPartial" />

        <form id="frmCreate" style="position:relative">
            <div class="row g-3">
                <div class="col-md-6">
                    <div class="form-floating">
                        <input class="form-control" id="UNPersonalNumber" name="UNPersonalNumber" placeholder="Enter Personal Number" required />
                        <label>UN Personal Number</label>
                    </div>
                    <div id="UNPersonalNumberError" class="text-danger"></div>
                </div>
                <div class="col-md-6">
                    <div class="form-floating">
                        <input id="UNFileNumber" name="UNFileNumber" class="form-control" placeholder="Enter File Number" required />
                        <label>UN File Number</label>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-floating">
                        <input id="UNFirstName" name="UNFirstName" class="form-control" placeholder="Enter First Name" required />
                        <label>First Name</label>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-floating">
                        <input id="UNLastName" name="UNLastName" class="form-control" placeholder="Enter Last Name" required />
                        <label>Last Name</label>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-floating">
                        <select id="Gender" name="Gender" class="form-select" required>
                            <option value="">Select Gender</option>
                            <option value="M">Male</option>
                            <option value="F">Female</option>
                        </select>
                        <label>Gender</label>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-floating">
                        <input type="date" id="Birthdate" name="Birthdate" class="form-control" placeholder="Enter Birthdate" required />
                        <label>Birthdate</label>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-check form-switch">
                        <input class="form-check-input" id="Baptised" type="checkbox" />
                        <label class="form-check-label">Baptised</label>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-floating">
                        <input id="BaptismName" class="form-control" placeholder="Enter Baptism Name" />
                        <label>Baptism Name</label>
                    </div>
                </div>
                <div class="col-md-12">
                    <div class="form-floating position-relative">
                        <input type="file" class="form-control" id="ImageUpload" accept="image/*" />
                        <label for="ImageUpload">Upload Image</label>
                    </div>
                    <span id="ImageUploadError" class="text-danger"></span>
                </div>
                <div class="col-md-12">
                    <label for="drpClasses" class="form-label floating-label-custom">Classes</label>
                    <select class="form-select" id="drpClasses" name="drpClasses" multiple required></select>
                </div>
                <div class="col-md-6">
                    <div class="form-floating">
                        <input id="Mobile" class="form-control" placeholder="Enter Mobile" />
                        <label>Mobile</label>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-floating">
                        <input id="Nickname" class="form-control" placeholder="Enter Nickname" />
                        <label></label>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-floating">
                        <input id="School" class="form-control" placeholder="Enter School" />
                        <label>School</label>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-floating">
                        <input id="Work" class="form-control" placeholder="Enter Work" />
                        <label>Work</label>
                    </div>
                </div>
                <div class="col-md-12">
                    <div class="form-floating">
                        <textarea id="Notes" class="form-control" placeholder="Enter Notes" style="height: 100px;"></textarea>
                        <label>Notes</label>
                    </div>
                </div>
            </div>
            <div class="d-flex justify-content-between mt-4">
                <a href="Index" id="backToList" class="btn btn-outline-secondary">Back to List</a>
                <div class="d-flex gap-2">
                    <button type="submit" name="action" value="AddAnother" class="btn btn-primary">Create & Add Another</button>
                    <button type="submit" name="action" value="Add" class="btn btn-primary">Create</button>
                </div>
            </div>
        </form>
    </div>
</div>
@section Scripts {
<script>
        var apiBaseUrl = '@Services.SMConfigurationManager.ApiBase';

        async function createMember() {
        const formData = new FormData();

        //const classesDropdown = document.getElementById("drpClasses");
        //const selectedClasses = Array.from(classesDropdown.selectedOptions).map(opt => parseInt(opt.value));
        const selectedClasses = $('#drpClasses').val();
        // Collect form values
        formData.append("UNPersonalNumber", document.getElementById("UNPersonalNumber").value);
        formData.append("UNFileNumber", document.getElementById("UNFileNumber").value);
        formData.append("UNFirstName", document.getElementById("UNFirstName").value);
        formData.append("UNLastName", document.getElementById("UNLastName").value);
        formData.append("Gender", document.getElementById("Gender").value);
        formData.append("Birthdate", document.getElementById("Birthdate").value);
        formData.append("Baptised", document.getElementById("Baptised").checked);
        formData.append("Mobile", document.getElementById("Mobile").value);
        formData.append("Nickname", document.getElementById("Nickname").value);
        formData.append("BaptismName", document.getElementById("BaptismName").value);
        formData.append("School", document.getElementById("School").value);
        formData.append("Work", document.getElementById("Work").value);
        formData.append("Notes", document.getElementById("Notes").value);
        formData.append("Classes", selectedClasses);
        const fileInput = document.getElementById("ImageUpload");
        if (fileInput.files.length > 0) {
            formData.append("ImageFile", fileInput.files[0]);
        }
        const request = `${apiBaseUrl}/Member/CreateMemberWImage`;
        try {
            const response = await fetch(request, {
                method: "POST",
                credentials: "include",
                body: formData
            });

            if (!response.ok) {
                const error = await response.text();
                throw new Error(error);
            }

            const memberCode = await response.text();
            showSuccessToast("Member created successfully with code: "+ memberCode);
        } catch (err) {
            console.error("Failed to submit form:", err);
            alert("Error: " + err.message);
        }
    }
        $(async function() {
                // --- 1. INITIAL PAGE SETUP ---
                showLoading();
                document.getElementById("UNPersonalNumber").focus();

                // Correctly wait for classes to be loaded and Select2 to be initialized
                if (typeof loadClasses === "function") {
                    await loadClasses(apiBaseUrl);
                }

                const baptisedCheckbox = document.getElementById("Baptised");
                const baptismNameInput = document.getElementById("BaptismName");

                function toggleBaptismName() {
                    baptismNameInput.disabled = !baptisedCheckbox.checked;
                }
                toggleBaptismName();
                baptisedCheckbox.addEventListener("change", toggleBaptismName);

                hideLoading();


                // --- 2. JQUERY VALIDATION SETUP ---
                $("#frmCreate").validate({
                    // FIX: This makes validation work with the hidden <select> used by Select2
                    ignore: [],

                    errorClass: "text-danger",
                    errorElement: "div",

                    // Defines all validation rules for this specific complex form
                    rules: {
                        UNPersonalNumber: {
                            required: true,
                            remote: { // The clean way to do the API check
                                url: `${apiBaseUrl}/Member/ValidateUNNumber`,
                                type: "get",
                                data: {
                                    unFileNumber: function() { return $("#UNPersonalNumber").val(); }
                                },
                                xhrFields: {
                                    withCredentials: true
                                }
                            }
                        },
                        UNFileNumber: "required",
                        UNFirstName: "required",
                        UNLastName: "required",
                        Gender: "required",
                        Birthdate: "required",
                        drpClasses: "required"
                    },
                    // Defines custom messages for the rules
                    messages: {
                        UNPersonalNumber: {
                            required: "UN Personal Number is required.",
                            remote: "This UN number already exists."
                        },
                        drpClasses: "At least one class must be selected."
                    },

                    // FIX: These functions correctly add/remove the red border from Select2 elements
                    highlight: function(element) {
                        $(element).addClass('is-invalid');
                        if ($(element).hasClass('form-select')) {
                            $(element).next('.select2-container').find('.select2-selection').addClass('is-invalid');
                        }
                    },
                    unhighlight: function(element) {
                        $(element).removeClass('is-invalid');
                        if ($(element).hasClass('form-select')) {
                            $(element).next('.select2-container').find('.select2-selection').removeClass('is-invalid');
                        }
                    },

                           errorPlacement: function(error, element) {
            if (element.attr("name") === "UNPersonalNumber") {
                error.appendTo("#UNPersonalNumberError");
            } else if (element.next('.select2-container').length) {
                error.insertAfter(element.next('.select2-container'));
            } else if (element.parent().hasClass('form-floating')) {
                error.insertAfter(element.parent());
            } else {
                error.insertAfter(element);
            }
        },


                    // This function runs ONLY when the form is valid and submitted
                    submitHandler: async function(form, event) {
                        event.preventDefault();
                        showLoading();
                        await createMember();

                        const unFileNumber = document.getElementById("UNFileNumber").value;
                        form.reset();
                        $('#drpClasses').val(null).trigger('change');

                        const clickedButton = event.originalEvent.submitter;
                        const action = clickedButton?.value;
                        document.getElementById("UNPersonalNumber").focus();

                        if (action === "AddAnother") {
                            document.getElementById("UNFileNumber").value = unFileNumber;
                        }
                        hideLoading();
                    }
                });


                // --- 3. JQUERY VALIDATION FIXES ---
                // FIX: This manually triggers re-validation on the dropdown when you make a
                // selection, which makes the error message disappear correctly.
                $('#drpClasses').on('change', function() {
                    $(this).valid();
                });
            });
</script>
}