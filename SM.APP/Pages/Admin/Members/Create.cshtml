@page
@model SM.APP.Pages.Admin.Members.CreateModel

@{
    ViewData["Title"] = "Create Member";
}

<partial name="_LoadingPartial" />
<div class="container mt-4" id="container">
    <h1 class="text-center">Create Member</h1>
    <hr />
    <div class="card shadow-lg p-4">
        <partial name="_SuccessToastPartial" />

        <form id="frmCreate" style="position:relative">
            <div class="row g-3">
                <div class="col-md-6">
                    <div class="form-floating">
                        <input class="form-control" id="UNPersonalNumber" name="UNPersonalNumber" placeholder="Enter Personal Number" required />
                        <label>UN Personal Number</label>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-floating">
                        <input id="UNFileNumber" name="UNFileNumber" class="form-control" placeholder="Enter File Number" required />
                        <label>UN File Number</label>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-floating">
                        <input id="UNFirstName" name="UNFirstName" class="form-control" placeholder="Enter First Name" required />
                        <label>First Name</label>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-floating">
                        <input id="UNLastName" name="UNLastName" class="form-control" placeholder="Enter Last Name" required />
                        <label>Last Name</label>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-floating">
                        <select id="Gender" name="Gender" class="form-select" required>
                            <option value="">Select Gender</option>
                            <option value="M">Male</option>
                            <option value="F">Female</option>
                        </select>
                        <label>Gender</label>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-floating">
                        <input type="date" id="Birthdate" name="Birthdate" class="form-control" placeholder="Enter Birthdate" required />
                        <label>Birthdate</label>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-check form-switch">
                        <input class="form-check-input" id="Baptised" type="checkbox" />
                        <label class="form-check-label">Baptised</label>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-floating">
                        <input id="BaptismName" class="form-control" placeholder="Enter Baptism Name" />
                        <label>Baptism Name</label>
                    </div>
                </div>
                <div class="col-md-12">
                    <div class="form-floating position-relative">
                        <input type="file" class="form-control" id="ImageUpload" accept="image/*" />
                        <label for="ImageUpload">Upload Image</label>
                    </div>
                    <span id="ImageUploadError" class="text-danger"></span>
                </div>
                <div class="col-md-12">
                    <label for="drpClasses" class="form-label floating-label-custom">Classes</label>
                    <select class="form-select" id="drpClasses" name="drpClasses" multiple></select>
                </div>
                <div class="col-md-6">
                    <div class="form-floating">
                        <input id="Mobile" class="form-control" placeholder="Enter Mobile" />
                        <label>Mobile</label>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-floating">
                        <input id="Nickname" class="form-control" placeholder="Enter Nickname" />
                        <label></label>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-floating">
                        <input id="School" class="form-control" placeholder="Enter School" />
                        <label>School</label>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-floating">
                        <input id="Work" class="form-control" placeholder="Enter Work" />
                        <label>Work</label>
                    </div>
                </div>
                <div class="col-md-12">
                    <div class="form-floating">
                        <textarea id="Notes" class="form-control" placeholder="Enter Notes" style="height: 100px;"></textarea>
                        <label>Notes</label>
                    </div>
                </div>
            </div>
            <div class="d-flex justify-content-between mt-4">
                <a href="Search" id="backToList" class="btn btn-outline-secondary">Back to List</a>
                <div class="d-flex gap-2">
                    <button type="submit" name="action" value="AddAnother" class="btn btn-primary">Create & Add Another</button>
                    <button type="submit" name="action" value="Add" class="btn btn-primary">Create</button>
                </div>
            </div>
        </form>
    </div>
</div>
@section Scripts {
    <script>
        var apiBaseUrl = '@Services.SMConfigurationManager.ApiBase';

        async function createMember() {
            const formData = new FormData();

            formData.append("UNPersonalNumber", $("#UNPersonalNumber").val());
            formData.append("UNFileNumber", $("#UNFileNumber").val());
            formData.append("UNFirstName", $("#UNFirstName").val());
            formData.append("UNLastName", $("#UNLastName").val());
            formData.append("Gender", $("#Gender").val());
            formData.append("Birthdate", $("#Birthdate").val());
            formData.append("Baptised", $("#Baptised").is(':checked'));
            formData.append("Mobile", $("#Mobile").val());
            formData.append("Nickname", $("#Nickname").val());
            formData.append("BaptismName", $("#BaptismName").val());
            formData.append("School", $("#School").val());
            formData.append("Work", $("#Work").val());
            formData.append("Notes", $("#Notes").val());

            const selectedClasses = $('#drpClasses').val();
            if (selectedClasses) {
                selectedClasses.forEach(classId => {
                    formData.append("Classes", classId);
                });
            }

            const fileInput = document.getElementById("ImageUpload");
            if (fileInput.files.length > 0) {
                formData.append("ImageFile", fileInput.files[0]);
            }
            const request = `${apiBaseUrl}/Member/CreateMemberWImage`;
            try {
                const response = await fetch(request, { method: "POST", credentials: "include", body: formData });
                if (!response.ok) {
                    const errorData = await response.json();
                    console.error("Failed to save member data:", errorData);
                    showFailedToast("Failed to save member: " + errorData.message);
                    return;
                }
                else{
                    const memberCode = await response.text();
                    showSuccessToast("Member created successfully with code: " + memberCode);
                }
            } catch (err) {
                console.error("Failed to submit member data:", err);
                showFailedToast("Failed to save member data!");
            }
        }

            $(async function() {
            showLoading();

            if (typeof loadClasses === "function") { await loadClasses(apiBaseUrl); }
            const baptisedCheckbox = document.getElementById("Baptised");
            const baptismNameInput = document.getElementById("BaptismName");
            function toggleBaptismName() { baptismNameInput.disabled = !baptisedCheckbox.checked; }
            toggleBaptismName();
            baptisedCheckbox.addEventListener("change", toggleBaptismName);
            hideLoading();
            $("#UNPersonalNumber").focus();

            $("#frmCreate").validate({
                ignore: [],
                errorClass: "text-danger",
                errorElement: "div",
                rules: {
                    UNPersonalNumber: {
                        required: true,
                        remote: {
                            url: `${apiBaseUrl}/Member/ValidateUNNumber`,
                            type: "get",
                            data: { unFileNumber: function() { return $("#UNPersonalNumber").val(); } },
                            xhrFields: { withCredentials: true }
                        }
                    },
                    UNFileNumber: "required",
                    UNFirstName: "required",
                    UNLastName: "required",
                    Gender: "required",
                    Birthdate: "required"
                },
                messages: {
                    UNPersonalNumber: { required: "UN Personal Number is required.", remote: "This UN number already exists." }
                },

                highlight: function(element) { $(element).addClass('is-invalid'); if ($(element).hasClass('form-select')) { $(element).next('.select2-container').find('.select2-selection').addClass('is-invalid'); } },
                unhighlight: function(element) { $(element).removeClass('is-invalid'); if ($(element).hasClass('form-select')) { $(element).next('.select2-container').find('.select2-selection').removeClass('is-invalid'); } },

                // The new, simplified errorPlacement function
                errorPlacement: function(error, element) {
                    if (element.next('.select2-container').length) {
                        error.insertAfter(element.next('.select2-container'));
                    } else if (element.parent().hasClass('form-floating')) {
                        error.insertAfter(element.parent());
                    } else {
                        error.insertAfter(element);
                    }
                },

                submitHandler: async function(form, event) {
                    event.preventDefault();
                    showLoading();
                    await createMember();
                    const unFileNumber = $("#UNFileNumber").val();

                    form.reset();
                    $('#drpClasses').val(null).trigger('change');

                    var validator = $(form).validate();
                    validator.resetForm(); // Using the standard reset which should now work.

                    setTimeout(function() {
                        $("#UNPersonalNumber").focus();
                        if (event.originalEvent.submitter?.value === "AddAnother") {
                            $("#UNFileNumber").val(unFileNumber);
                        }
                    }, 100);

                    hideLoading();
                }
            });

            $('#drpClasses').on('change', function() {
                $(this).valid();
            });
        });
    </script>
}