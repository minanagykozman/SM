@page
@model SM.APP.Pages.Classess.TakeAttendanceModel
@{
    ViewData["Title"] = "Take Attendance";
}
@using SM.APP.Pages.Classess
@using SM.DAL.DataModel
<h2>Take Attendance</h2>
<input type="hidden" name="classOccurenceID" value="@ViewContext.HttpContext.Request.Query["classOccurenceID"]" />
<partial name="_SearchPartial" />
<partial name="_ModalPartial" />
<!-- Table for Larger Screens -->
<div class="d-none d-md-block">
    <div class="table-responsive" style="max-height: 400px; overflow-y: auto;">
        <table class="table table-hover align-middle" id="dataTable">
            <thead class="table-primary">
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.ClassOccurenceMembers[0].Code)
                        <input type="text" class="form-control form-control-sm border-primary filter-input" data-column="0" placeholder="Search Code">
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.ClassOccurenceMembers[0].FullName)
                        <input type="text" class="form-control form-control-sm border-primary filter-input" data-column="1" placeholder="Search Name">
                    </th>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
    </div>
</div>
<!-- Mobile View -->
<div class="d-block d-md-none">
    <div class="card p-2 mb-2 bg-light">
        <h6 class="text-primary">Filter</h6>
        <input type="text" class="form-control form-control-sm mobile-filter" placeholder="Search members...">
    </div>

    <div class="list-group" id="mobileList">
    </div>
</div>

<script>
    var apiBaseUrl = '@Services.SMConfigurationManager.ApiBase';
    document.addEventListener("DOMContentLoaded", function () {
        fetchAttendance();
    });

    // Function to fetch attended members
    async function fetchAttendance() {
        const url = `${apiBaseUrl}/Meeting/GetAttendedMembers`;
        const occurenceID = document.querySelector('input[name="classOccurenceID"]').value;
        if (!occurenceID) {
            console.error("Event ID is missing");
            showErrorMessage("Event ID is missing. Cannot fetch data.");
            return;
        }

        try {
            const response = await fetch(`${url}?occurenceID=${occurenceID}`, {
                method: "GET",
                credentials: "include",
                headers: {
                    "Content-Type": "application/json"
                }
            });

            if (!response.ok) {
                handleHTTPError(response);
                return;
            }

            const members = await response.json();

            if (!Array.isArray(members) || members.length === 0) {
                showErrorMessage("No members found for this meeting.");
                return;
            }

            //document.getElementById("counter").textContent = `Attended: ${members.length}`;
            populateTable(members);
        } catch (error) {
            console.error("Network error:", error);
            showErrorMessage("Failed to fetch data. Please try again later.");
        }
    }
    function populateTable(members) {
        const tableBody = document.querySelector("#dataTable tbody");
        tableBody.innerHTML = ""; // Clear existing rows

        const mobileList = document.getElementById("mobileList");
        mobileList.innerHTML = ""; // Clear existing list items

        members.forEach(member => {
            const row = document.createElement("tr");

            row.innerHTML = `
                <td><a href="/Admin/Members/Edit?id=${member.memberID}" target="_blank" rel="noopener noreferrer">${member.code}</a></td>
                <td>${member.fullName}</td>
            `;

            tableBody.appendChild(row);

            const listItem = document.createElement("div");
        listItem.classList.add("list-group-item", "list-group-item-action", "flex-column", "align-items-start");

        listItem.innerHTML = `
            <h5 class="mb-1 text-primary">
                <a href="/Admin/Members/Edit?id=${member.memberID}" target="_blank" rel="noopener noreferrer">${member.code}</a>
            </h5>
            <p class="mb-1"><strong>Name:</strong> ${member.fullName}</p>
        `;

        mobileList.appendChild(listItem);
        });
    }
    document.getElementById("btnCheck").addEventListener("click", function () {
        const searchValue = document.getElementById("SearchString").value.trim();
        if (!searchValue) {
            alert("Please enter a search value.");
            return;
        }
        const occurenceID = document.querySelector('input[name="classOccurenceID"]').value;

        const apiUrl = `${apiBaseUrl}/Meeting/CheckAttendance?classOccurenceID=${occurenceID}&memberCode=${encodeURIComponent(searchValue)}`;
            fetch(apiUrl, {
            method: "GET",
            credentials: "include",
            headers: {
                "Content-Type": "application/json"
            }
        })
        .then(response => response.json())
        .then(data => {
            populateModal(data); // Function to fill modal with API response
        })
        .catch(error => {
            console.error("Error fetching data:", error);
            alert("Failed to fetch data. Please try again.");
        });

    });

    function populateModal(data) {
        $("#divTeam").hide();
        $("#divBus").hide();
        switch (data.attendanceStatus) {
            case 0:
                document.getElementById("MemberStatus").value = "Member not registered in class";
                document.getElementById("MemberCode").value =data.member.code;
                document.getElementById("MemberName").value =data.member.fullName;
                document.getElementById("MemberAge").value =data.member.age;
                document.getElementById("CardStatus").value =data.member.cardStatus;
                document.querySelector('input[name="MemberCode"]').value = data.member.code;
                $("#MemberDataBody").show();
                $("#submitBtn").show();
                showModal();
                break;
            case 1:
                document.getElementById("MemberStatus").value = "Member not found";
                $("#MemberDataBody").hide();
                $("#submitBtn").hide();
                showModal();
                break;
            case 2:
                document.getElementById("MemberStatus").value = "Meeting not found";
                $("#MemberDataBody").hide();
                $("#submitBtn").hide();
                showModal();
                break;
            case 3:
                document.getElementById("MemberStatus").value = "Member already attedned!";
                $("#MemberDataBody").show();
                $("#submitBtn").hide();
                document.getElementById("MemberName").value =data.member.fullName;
                document.getElementById("MemberCode").value =data.member.code;
                document.getElementById("MemberAge").value =data.member.age;
                document.getElementById("CardStatus").value =data.member.cardStatus;
                showModal();
                break;
            case 4:
            case 5:
                document.querySelector('input[name="MemberCode"]').value = data.member.code;
                takeAttendance(false);
                var searchInput = document.getElementById("SearchString");
                searchInput.value = "";
                searchInput.focus();
                break;
        }
    }

    document.getElementById("submitBtn").addEventListener("click", function () {
        takeAttendance(true);
        var searchInput = document.getElementById("SearchString");
        searchInput.value = "";
        searchInput.focus();
        closeModal();
    });

    function takeAttendance(forceRegister)
    {
        const occurenceID = document.querySelector('input[name="classOccurenceID"]').value;
        const memberCode = document.querySelector('input[name="MemberCode"]').value;
        const apiUrl = `${apiBaseUrl}/Meeting/TakeAttendance?classOccurenceID=${occurenceID}&memberCode=${encodeURIComponent(memberCode)}&forceRegister=${forceRegister}`;
        fetch(apiUrl, {
            method: "POST",
            credentials: "include",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({  classOccuranceID:occurenceID, memberCode: memberCode, forceRegister: forceRegister })
        })
        .then(response => response.json())
        .then(data => {
            console.log("Success:", data);
            fetchAttendance();
        })
        .catch(error => {
            console.error("Error:", error);
            alert("Failed to add member. Please try again.");
        });
    }
</script>
