@page
@model SM.APP.Pages.Attendance.TakeAttendanceModel
@{
}
@using SM.APP.Pages.Attendance
<h2>Take Attendance</h2>
<form method="get">
    <div class="form-floating mb-3">
        <input type="hidden" name="classOccurenceID" value="@ViewContext.HttpContext.Request.Query["classOccurenceID"]" />
        <input asp-for="UserCode" class="form-control" id="SearchString" />
        <label asp-for="UserCode">Code</label>
        <button id="btnCheck" type="submit" class="btn-primary">Check</button>
    </div>
    <div class="container mt-4">
        <div class="table-responsive" style="max-height: 300px; overflow-y: auto;">
            <table class="table table-bordered">
                <thead class="table-dark">
                    <tr>
                        <th>
                            @Html.DisplayNameFor(model => model.ClassOccurenceMembers[0].Code)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.ClassOccurenceMembers[0].FullName)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.ClassOccurenceMembers[0].UNFileNumber)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.ClassOccurenceMembers[0].UNPersonalNumber)
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.ClassOccurenceMembers)
                    {
                        <tr>
                            <td>
                                @Html.DisplayFor(modelItem => item.Code)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.FullName)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.UNFileNumber)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.UNPersonalNumber)
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</form>
<form method="post" id="registerForm">
    <div class="modal fade" id="myModal" tabindex="-1" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="myModalLabel">Member Status</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>
                        <strong>Status: </strong><label class="form-label">@Model.MemberStatus</label>
                    </p>

                    @if (TakeAttendanceModel.MemberData != null && TakeAttendanceModel.MemberData.Member != null)
                    {
                        <p><strong>Name: </strong> @TakeAttendanceModel.MemberData.Member.FullName</p>
                        <p><strong>Age: </strong> @TakeAttendanceModel.MemberData.Member.Age</p>
                        <p><strong>Image: </strong> @TakeAttendanceModel.MemberData.Member.ImageReference</p>
                    }
                </div>
                <div class="modal-footer">
                    @if (TakeAttendanceModel.MemberData != null && TakeAttendanceModel.MemberData.Member != null &&
                    TakeAttendanceModel.MemberData.AttendanceStatus == AttendanceStatus.NotRegisteredInClass)
                    {
                        <label>This will automatically add member in class</label>
                        <input type="submit" id="submitBtn" value="Present" class="btn btn-primary" />
                    }
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                </div>
            </div>
        </div>
    </div>
</form>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        var isShowModal = @Model.ShowModal.ToString().ToLower();
        var searchInput = document.getElementById("SearchString");
        var cancelBtn = document.querySelector(".btn-secondary");
        if (cancelBtn) {
            cancelBtn.addEventListener('click', function () {
                searchInput.value = "";
                searchInput.focus(); // Focus on search input when Cancel is clicked
            });
        }
        // Handle Esc key press to close the modal and clear input
        document.addEventListener('keydown', function (event) {
            if (event.key === 'Escape') {
                // Close the modal (if it's open)
                // var myModal = bootstrap.Modal.getInstance(modal);
                // if (myModal) {
                //     myModal.hide();
                // }

                searchInput.value = "";
                searchInput.focus();
            }
        });

        if (searchInput)
        {
            searchInput.focus();
        }
        if (isShowModal) {
            var myModal = new bootstrap.Modal(document.getElementById('myModal'));
            myModal.show();
        }

        // Handle Enter key inside modal
        document.getElementById('myModal').addEventListener('keydown', function (event) {
            if (event.key === 'Enter' && !event.shiftKey) {
                event.preventDefault(); // Prevent default behavior
                document.getElementById('submitBtn').click(); // Trigger submit button
            }
        });

        // Allow Shift + Enter for new lines in textarea
        document.getElementById('notes')?.addEventListener('keydown', function (event) {
            if (event.key === 'Enter' && event.shiftKey) {
                event.stopPropagation(); // Allow new line in textarea
            }
        });

        // Ensure modal backdrop is removed when modal is closed
        document.getElementById('myModal').addEventListener('hidden.bs.modal', function () {
            document.querySelectorAll('.modal-backdrop').forEach(el => el.remove());
        });
    });
</script>;
