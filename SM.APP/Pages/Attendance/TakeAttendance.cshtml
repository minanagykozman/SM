@page
@model SM.APP.Pages.Attendance.TakeAttendanceModel
@{
}
@using SM.APP.Pages.Attendance
@using SM.DAL.DataModel
<h2>Take Attendance</h2>
<form method="get">
    <div class="mb-3 d-flex align-items-center">
        <input type="hidden" name="classOccurenceID" value="@ViewContext.HttpContext.Request.Query["classOccurenceID"]" />

        <div class="form-floating flex-grow-1">
            <input asp-for="UserCode" class="form-control" id="SearchString" placeholder="Enter Code" />
            <label asp-for="UserCode">Code</label>
        </div>

        <button id="btnCheck" type="submit" class="btn btn-primary ms-2">Check</button>
    </div>
    <div class="container mt-4">
        <div class="table-responsive" style="max-height: 300px; overflow-y: auto;">
            <table class="table table-bordered">
                <thead class="table-dark">
                    <tr>
                        <th>
                            @Html.DisplayNameFor(model => model.ClassOccurenceMembers[0].Code)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.ClassOccurenceMembers[0].FullName)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.ClassOccurenceMembers[0].UNFileNumber)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.ClassOccurenceMembers[0].UNPersonalNumber)
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.ClassOccurenceMembers)
                    {
                        <tr>
                            <td>
                                @Html.DisplayFor(modelItem => item.Code)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.FullName)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.UNFileNumber)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.UNPersonalNumber)
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</form>
<form method="post" id="registerForm">
    <div class="modal fade" id="myModal" tabindex="-1" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class="modal-content">
                <!-- Modal Header -->
                <div class="modal-header bg-light">
                    <h5 class="modal-title" id="myModalLabel">Member Status</h5>
                    <button type="button" class="btn-close" id="btnClose" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- Status -->
                    <div class="form-floating mb-3">
                        <input type="text" class="form-control" id="MemberStatus" value="@Model.MemberStatus" readonly>
                        <label for="MemberStatus">Status</label>
                    </div>

                    @if (Model.MemberData != null && Model.MemberData.Member != null)
                    {
                        <div class="row g-3">
                            <div class="col-md-6">
                                <div class="form-floating">
                                    <input type="text" class="form-control" id="MemberName" value="@Model.MemberData.Member.FullName" readonly>
                                    <label for="MemberName">Name</label>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-floating">
                                    <input type="text" class="form-control" id="MemberAge" value="@Model.MemberData.Member.Age" readonly>
                                    <label for="MemberAge">Age</label>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-floating">
                                    <input type="text" class="form-control" id="ImageReference" value="@Model.MemberData.Member.ImageReference" readonly>
                                    <label for="MemberAge">Image Reference</label>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                <div class="modal-footer d-flex justify-content-between">
                    <button type="button" id="btnCancel" class="btn btn-outline-secondary" data-bs-dismiss="modal">
                        <i class="bi bi-x-circle"></i> Cancel
                    </button>
                    @if (Model.MemberData != null && Model.MemberData.Member != null &&
                    Model.MemberData.AttendanceStatus == AttendanceStatus.NotRegisteredInClass)
                    {
                        <label>This will automatically add member in class</label>
                        <button type="submit" id="submitBtn" class="btn btn-success">
                            <i class="bi bi-check-circle"></i> Present
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
</form>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        var isShowModal = @Model.ShowModal.ToString().ToLower();
        var searchInput = document.getElementById("SearchString");
        var cancelBtn = document.getElementById("btnCancel");
        searchInput.value = "";
        searchInput.focus();
        if (cancelBtn) {
            cancelBtn.addEventListener('click', function () {
                searchInput.value = "";
                searchInput.focus(); // Focus on search input when Cancel is clicked
            });
        }
        var btnClose = document.getElementById("btnClose");
        if (btnClose) {
            btnClose.addEventListener('click', function () {
                searchInput.value = "";
                searchInput.focus(); // Focus on search input when Cancel is clicked
            });
        }
        // Handle Esc key press to close the modal and clear input
        document.addEventListener('keydown', function (event) {
            if (event.key === 'Escape') {
                searchInput.value = "";
                searchInput.focus();
            }
        });

        if (searchInput)
        {
            searchInput.focus();
        }
        if (isShowModal) {
            var myModal = new bootstrap.Modal(document.getElementById('myModal'));
            myModal.show();
        }

        // Handle Enter key inside modal
        document.getElementById('myModal').addEventListener('keydown', function (event) {
            if (event.key === 'Enter' && !event.shiftKey) {
                event.preventDefault(); // Prevent default behavior
                document.getElementById('submitBtn').click(); // Trigger submit button
            }
        });

        // Allow Shift + Enter for new lines in textarea
        document.getElementById('notes')?.addEventListener('keydown', function (event) {
            if (event.key === 'Enter' && event.shiftKey) {
                event.stopPropagation(); // Allow new line in textarea
            }
        });

        // Ensure modal backdrop is removed when modal is closed
        document.getElementById('myModal').addEventListener('hidden.bs.modal', function () {
            document.querySelectorAll('.modal-backdrop').forEach(el => el.remove());
        });
    });
</script>;
