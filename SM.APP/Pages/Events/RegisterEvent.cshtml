@page
@model SM.APP.Pages.Events.RegisterEventModel
@{
    ViewData["Title"] = "Register Event";
}
@using SM.APP.Pages.Events;
@using SM.DAL.DataModel;
<div class="container my-4">
    <!-- Page Title -->
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h4 class="mb-0">Register Event</h4> <!-- Optional title -->
        <span id="counter" class="badge bg-success px-3 py-2 fs-6"></span>
    </div>
    <input type="hidden" name="eventID" value="@ViewContext.HttpContext.Request.Query["eventID"]" />
    <partial name="_SearchPartial" />
    <partial name="_ModalPartial" />
    <partial name="_LoadingPartial" />
    <!-- Table for Larger Screens -->
    <div class="d-none d-md-block">
        <div class="table-responsive">
            <div class="table-responsive" style="max-height: 400px; overflow-y: auto;">
                <table class="table table-hover table-striped  align-middle" id="dataTable">
                    <thead class="table-primary">
                        <tr>
                            <th>
                                Code
                                <input type="text" class="form-control form-control-sm border-primary filter-input" data-column="0" placeholder="Search Code">
                            </th>
                            <th>
                                Name
                                <input type="text" class="form-control form-control-sm border-primary filter-input" data-column="1" placeholder="Search Name">
                            </th>
                            <th>
                                Age
                                <input type="text" class="form-control form-control-sm border-primary filter-input" data-column="4" placeholder="Search Age">
                            </th>
                            <th>
                                Baptized
                                <input type="text" class="form-control form-control-sm border-primary filter-input" data-column="5" placeholder="Search Baptised">
                            </th>
                            <th>
                                Card Status
                                <input type="text" class="form-control form-control-sm border-primary filter-input" data-column="6" placeholder="Search Card Status">
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <!-- Mobile View -->
    <partial name="_MobileViewPartial" />
</div>
<script>
    var apiBaseUrl = '@Services.SMConfigurationManager.ApiBase';
    document.addEventListener("DOMContentLoaded", function () {
        //ajust popup
        $("#divTeam").hide();
        $("#divBus").hide();
        $("#submitBtn").html('<i class="bi bi-check-circle"></i> Register');

        //populate registered members data.
        fetchEventMembers();
    });
    // Function to fetch attended members
    async function fetchEventMembers() {
        const url = `${apiBaseUrl}/Events/GetEventRegisteredMembers`;
         const loadingIndicator = document.getElementById("loadingIndicator");

        const eventID = document.querySelector('input[name="eventID"]').value;
        if (!eventID) {
            console.error("Event ID is missing");
            showErrorMessage("Event ID is missing. Cannot fetch data.");
            return;
        }

        try {
                loadingIndicator.classList.remove("d-none");

            const response = await fetch(`${url}?eventID=${eventID}`, {
                method: "GET",
                credentials: "include",
                headers: {
                    "Content-Type": "application/json"
                }
            });

            if (!response.ok) {
                handleHTTPError(response);
                return;
            }

            const members = await response.json();

            if (!Array.isArray(members) || members.length === 0) {
                showErrorMessage("No members found for this event.");
                return;
            }

            //document.getElementById("counter").textContent = `Members: ${members.length}`;
            populateTable(members);
        } catch (error) {
            console.error("Network error:", error);
            showErrorMessage("Failed to fetch data. Please try again later.");
        }
        finally {
        // Hide loading indicator
        loadingIndicator.classList.add("d-none");
        }
    }
    function populateTable(members) {
        const tableBody = document.querySelector("#dataTable tbody");
        tableBody.innerHTML = ""; // Clear existing rows
        const mobileList = document.getElementById("mobileList");
        mobileList.innerHTML = ""; // Clear existing list items
        members.forEach(member => {
            const row = document.createElement("tr");

            row.innerHTML = `
                <td><a href="/Admin/Members/Edit?id=${member.memberID}" target="_blank" rel="noopener noreferrer">${member.code}</a></td>
                <td>${member.fullName}</td>
                <td>${member.age}</td>
                <td>
                <input type="checkbox" class="form-check-input" ${member.baptised ? "checked" : ""} disabled></td>
                <td>${member.cardStatus}</td>
            `;

            tableBody.appendChild(row);

            const listItem = document.createElement("div");
        listItem.classList.add("list-group-item", "list-group-item-action", "flex-column", "align-items-start");

        listItem.innerHTML = `
            <h5 class="mb-1 text-primary">
                <a href="/Admin/Members/Edit?id=${member.memberID}" target="_blank" rel="noopener noreferrer">${member.code}</a>
            </h5>
            <p class="mb-1"><strong>Name:</strong> ${member.fullName}</p>
            <p class="mb-1"><strong>Age:</strong> ${member.age}</p>
            <p class="mb-1"><strong>Team:</strong> ${member.team}</p>
            <p class="mb-1"><strong>Bus:</strong> ${member.bus}</p>
        `;

        mobileList.appendChild(listItem);
        });
    }
    document.getElementById("btnCheck").addEventListener("click", function () {
        const searchValue = document.getElementById("SearchString").value.trim();

        if (!searchValue) {
            alert("Please enter a search value.");
            return;
        }


        const eventID = document.querySelector('input[name="eventID"]').value;

        const apiUrl = `${apiBaseUrl}/Events/CheckRegistrationStatus?memberCode=${encodeURIComponent(searchValue)}&eventID=${eventID}`;
            fetch(apiUrl, {
            method: "GET",
            credentials: "include",
            headers: {
                "Content-Type": "application/json"
            }
        })
        .then(response => response.json())
        .then(data => {
            populateModal(data); // Function to fill modal with API response
            showModal(); // Function to display the modal
        })
        .catch(error => {
            console.error("Error fetching data:", error);
            alert("Failed to fetch data. Please try again.");
        });

    });

    // Function to fill modal with API response
    function populateModal(data) {
        
        document.querySelector('input[name="MemberStatusCode"]').value = data.status;
        
        switch (data.status) {
            case 0:
                document.getElementById("MemberStatus").value = "Member not found";
                $("#MemberDataBody").hide();
                $("#submitBtn").hide();
                break;
            case 1:
                document.getElementById("MemberStatus").value = "Event not found";
                $("#MemberDataBody").hide();
                $("#submitBtn").hide();
                break;
            case 2:
                document.getElementById("MemberStatus").value = "Member not elligible";
                document.getElementById("MemberCode").value =data.member.code;
                document.getElementById("MemberName").value =data.member.fullName;
                document.getElementById("MemberAge").value =data.member.age;
                document.getElementById("CardStatus").value =data.member.cardStatus;
                document.querySelector('input[name="MemberCode"]').value = data.member.code;
                $("#MemberDataBody").show();
                $("#submitBtn").show();
                break;
             case 3:
                document.getElementById("MemberStatus").value = "Member already registered!";
                $("#MemberDataBody").show();
                $("#submitBtn").hide();
                document.getElementById("MemberName").value =data.member.fullName;
                document.getElementById("MemberCode").value =data.member.code;
                document.getElementById("MemberAge").value =data.member.age;
                document.getElementById("CardStatus").value =data.member.cardStatus;
                break;
            case 4:
                document.getElementById("MemberStatus").value = "Can register";
                document.getElementById("MemberCode").value =data.member.code;
                document.getElementById("MemberName").value =data.member.fullName;
                document.getElementById("MemberAge").value =data.member.age;
                document.getElementById("CardStatus").value =data.member.cardStatus;
                document.querySelector('input[name="MemberCode"]').value = data.member.code;
                $("#MemberDataBody").show();
                $("#submitBtn").show();
                break;
           
        }
    }

    document.getElementById("submitBtn").addEventListener("click", function () {

        const eventID = document.querySelector('input[name="eventID"]').value; // Get eventID from hidden input
        const memberCode = document.querySelector('input[name="MemberCode"]').value;
        const memberStatusCode = document.querySelector('input[name="MemberStatusCode"]').value;
        let isException = memberStatusCode === 2;
        const apiUrl = `${apiBaseUrl}/Events/Register?memberCode=${encodeURIComponent(memberCode)}&eventID=${eventID}&isException=${isException}&notes=''`;


        fetch(apiUrl, {
            method: "POST",
            credentials: "include",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({  memberCode: memberCode, eventID: eventID,isException:isException,notes:'' })
        })
        .then(response => response.json())
        .then(data => {
            console.log("Success:", data);
            fetchEventMembers();
            closeModal(); // Close the modal after successful API call
            var searchInput = document.getElementById("SearchString");
            searchInput.value = "";
            searchInput.focus();
        })
        .catch(error => {
            console.error("Error:", error);
            alert("Failed to add member. Please try again.");
        });
    });
</script>


