@page
@model SM.APP.Pages.Events.RegisterEventModel
@{
    ViewData["Title"] = "Register Event";
}
@using SM.APP.Pages.Events;
<div class="container my-4">
    <!-- Page Title -->
    <h1 class="text-center mb-4">Register for Event</h1>
    <form method="get">
        <div class="mb-3 d-flex align-items-center">
            <input type="hidden" name="eventID" value="@ViewContext.HttpContext.Request.Query["eventID"]" />

            <div class="form-floating flex-grow-1">
                <input asp-for="UserCode" class="form-control" id="SearchString" placeholder="Enter Code" />
                <label asp-for="UserCode">Code</label>
            </div>

            <!-- Scan QR Code Button (only visible on mobile) -->
            <button type="button" id="btnScanQR" class="btn btn-secondary ms-2 d-md-none">Scan QR</button>

            <button id="btnCheck" type="submit" class="btn btn-primary ms-2">Check</button>
        </div>
    </form>
    <div id="qrScannerContainer" class="mt-3 d-none">
        <div id="reader" style="width: 100%;"></div>
        <button id="btnStopScan" class="btn btn-danger mt-2">Stop Scanning</button>
    </div>
    <!-- Table for Larger Screens -->
    <div class="d-none d-md-block">
        <div class="table-responsive">
            <div class="table-responsive" style="max-height: 400px; overflow-y: auto;">
                <table class="table table-hover align-middle">
                    <thead class="table-dark">
                        <tr>
                            <th>
                                @Html.DisplayNameFor(model => model.EventMembers[0].Code)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.EventMembers[0].FullName)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.EventMembers[0].UNFileNumber)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.EventMembers[0].UNPersonalNumber)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.EventMembers[0].Age)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.EventMembers[0].Baptised)
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.EventMembers)
                        {
                            <tr>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Code)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.FullName)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.UNFileNumber)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.UNPersonalNumber)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Age)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Baptised)
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <!-- Card Layout for Mobile -->
    <div class="d-md-none">
        @foreach (var item in Model.EventMembers)
        {
            <div class="card mb-3 shadow-sm">
                <div class="card-body">
                    <h5 class="card-title">@Html.DisplayFor(modelItem => item.FullName)</h5>
                    <p class="text-muted mb-1"><strong>Code:</strong> @Html.DisplayFor(modelItem => item.Code)</p>
                    <p class="mb-1"><strong>Mobile:</strong> @Html.DisplayFor(modelItem => item.Mobile)</p>
                    <p class="mb-1"><strong>Age:</strong> @Html.DisplayFor(modelItem => item.Age)</p>
                    <p class="mb-1"><strong>Baptised:</strong> @Html.DisplayFor(modelItem => item.Baptised)</p>
                </div>
            </div>
        }
    </div>
</div>
<form method="post" id="registerForm">
    <div class="modal fade" id="myModal" tabindex="-1" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="myModalLabel">Member Status</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>
                        <strong>Status: </strong><label class="form-label">@Model.MemberStatus</label>
                    </p>

                    @if (RegisterEventModel.MemberData != null && RegisterEventModel.MemberData.Member != null)
                    {
                        <p><strong>Name: </strong> @RegisterEventModel.MemberData.Member.FullName</p>
                        <p><strong>Age: </strong> @RegisterEventModel.MemberData.Member.Age</p>
                        <p><strong>Image: </strong> @RegisterEventModel.MemberData.Member.ImageReference</p>
                        @if (RegisterEventModel.MemberData.Status == RegistrationStatus.MemberNotEligible
                       || RegisterEventModel.MemberData.Status == RegistrationStatus.ReadyToRegister)
                        {
                            <p>
                                <strong>Notes: </strong>
                                <textarea class="form-control" id="notes" asp-for="Notes"></textarea>
                            </p>
                        }
                    }
                </div>
                <div class="modal-footer">
                    @if (RegisterEventModel.MemberData != null && RegisterEventModel.MemberData.Member != null &&
                    (RegisterEventModel.MemberData.Status == RegistrationStatus.MemberNotEligible
                    || RegisterEventModel.MemberData.Status == RegistrationStatus.ReadyToRegister))
                    {
                        <input type="submit" id="submitBtn" value="Register" class="btn btn-primary" />
                    }
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                </div>
            </div>
        </div>
    </div>
</form>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        var isShowModal = @Model.ShowModal.ToString().ToLower();
        var searchInput = document.getElementById("SearchString");
        var cancelBtn = document.querySelector(".btn-secondary");
        if (cancelBtn) {
            cancelBtn.addEventListener('click', function () {
                searchInput.value = "";
                searchInput.focus(); // Focus on search input when Cancel is clicked
            });
        }
        // Handle Esc key press to close the modal and clear input
        document.addEventListener('keydown', function (event) {
            if (event.key === 'Escape') {
                // Close the modal (if it's open)
                // var myModal = bootstrap.Modal.getInstance(modal);
                // if (myModal) {
                //     myModal.hide();
                // }

                searchInput.value = "";
                searchInput.focus();
            }
        });

        if (searchInput)
        {
            searchInput.focus();
        }
        if (isShowModal) {
            var myModal = new bootstrap.Modal(document.getElementById('myModal'));
            myModal.show();
        }

        // Handle Enter key inside modal
        document.getElementById('myModal').addEventListener('keydown', function (event) {
            if (event.key === 'Enter' && !event.shiftKey) {
                event.preventDefault(); // Prevent default behavior
                document.getElementById('submitBtn').click(); // Trigger submit button
            }
        });

        // Allow Shift + Enter for new lines in textarea
        document.getElementById('notes')?.addEventListener('keydown', function (event) {
            if (event.key === 'Enter' && event.shiftKey) {
                event.stopPropagation(); // Allow new line in textarea
            }
        });

        // Ensure modal backdrop is removed when modal is closed
        document.getElementById('myModal').addEventListener('hidden.bs.modal', function () {
            document.querySelectorAll('.modal-backdrop').forEach(el => el.remove());
        });
    });
</script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const scanButton = document.getElementById("btnScanQR");
        const qrScannerContainer = document.getElementById("qrScannerContainer");
        const stopScanButton = document.getElementById("btnStopScan");
        const searchInput = document.getElementById("SearchString");

        let html5QrCode;

        // Show QR scanner on mobile only
        if (window.innerWidth <= 768) {
            scanButton.addEventListener("click", function () {
                qrScannerContainer.classList.remove("d-none");

                html5QrCode = new Html5Qrcode("reader");
                html5QrCode.start(
                    { facingMode: "environment" }, // Use back camera
                    {
                        fps: 10,
                        qrbox: { width: 250, height: 250 }
                    },
                    (decodedText) => {
                        searchInput.value = decodedText;
                        html5QrCode.stop();
                        qrScannerContainer.classList.add("d-none");
                    },
                    (errorMessage) => {
                        console.warn("QR Code scan error: ", errorMessage);
                    }
                ).catch((err) => {
                    console.error("QR Code scanning failed: ", err);
                });
            });

            // Stop scanning
            stopScanButton.addEventListener("click", function () {
                if (html5QrCode) {
                    html5QrCode.stop();
                }
                qrScannerContainer.classList.add("d-none");
            });
        }
    });
</script>

